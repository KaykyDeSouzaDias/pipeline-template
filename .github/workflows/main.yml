name: Mood-Fi deploy pipeline

on:
  workflow_dispatch:

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - uses: actions/checkout@v3
      - name: Repository file list
        run: ls
      - name: Fetch
        run: git fetch --all
      - name: All branches
        run: git branch -a
      - name: Check status
        run: git status
  deploy-hmg:
    runs-on: ubuntu-latest
    environment: HMG
    steps:
    - uses: actions/checkout@v2
    - name: Set Git config
      run: |
          git config --local user.email "kaykydiasw@outlook.com.br"
          git config --local user.name "KaykyDeSouzaDias"
    - name: Approval process
      run: |
          git fetch
          git pull
          git branch release${{ vars.RELEASE_VERSION }}
          git checkout release${{ vars.RELEASE_VERSION }}
          git push -u origin release${{ vars.RELEASE_VERSION }}
  deploy-prod:
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.17.1'
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - name: Prod
        run: |
          git fetch
          ls
          npm install
          git checkout release${{ vars.RELEASE_BRANCH }}
          npm run tauri build
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ vars.RELEASE_VERSION }}
          release_name: Mood-Fi ${{ vars.RELEASE_VERSION }}
          body: ${{ vars.RELEASE_BODY }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./pipeline-template/src-tauri/target/release/bundle/msi/pipeline-template_1.0.0_x64_en-US.msi
          asset_name: pipeline-template_1.0.0_x64_en-US.msi
          asset_content_type: application/msi
