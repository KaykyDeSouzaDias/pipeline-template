name: Mood-Fi deploy pipeline

on:
  workflow_dispatch:

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - uses: actions/checkout@v3
      - name: Repository file list
        run: ls
      - name: Fetch
        run: git fetch --all
      - name: All branches
        run: git branch -a
      - name: Check status
        run: git status
  deploy-hmg:
    runs-on: ubuntu-latest
    environment: HMG
    steps:
    - uses: actions/checkout@v2
    - name: Set Git config
      run: |
          git config --local user.email "kaykydiasw@outlook.com.br"
          git config --local user.name "KaykyDeSouzaDias"
    - name: Approval process
      run: |
          git fetch
          git pull
          git branch release${{ vars.RELEASE_VERSION }}
          git checkout release${{ vars.RELEASE_VERSION }}
          git push -u origin release${{ vars.RELEASE_VERSION }}
  create-release:
    environment: PROD
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ vars.RELEASE_VERSION }}`,
              name: `Mood-Fi ${{ vars.RELEASE_VERSION }}`,
              body: '${{ vars.RELEASE_BODY }}',
              draft: true,
              prerelease: false
            })

            return data.id

  build-tauri:
    needs: create-release
    environment: PROD
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install app dependencies and build it
        run: yarn && yarn build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]
    environment: PROD

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
